/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option java_package = "org.apache.hadoop.hbase.protobuf.generated";
option java_outer_classname = "ProcedureProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

/**
 * Protobuf version of a java.lang.StackTraceElement
 * so we can serialize exceptions.
 */
message StackTraceElementMessage {
  optional string declaring_class = 1;
  optional string method_name = 2;
  optional string file_name = 3;
  optional int32 line_number = 4;
}

/**
 * Cause of a remote failure for a generic exception. Contains
 * all the information for a generic exception as well as
 * optional info about the error for generic info passing
 * (which should be another protobuffed class).
 */
message GenericExceptionMessage {
  optional string class_name = 1;
  optional string message = 2;
  optional bytes error_info = 3;
  repeated StackTraceElementMessage trace = 4;
}

/**
 * Exception sent across the wire when a remote task needs
 * to notify other tasks that it failed and why
 */
message ProcedureExceptionMessage {
  optional string source = 1;
  optional GenericExceptionMessage generic_exception = 2;
}

enum ProcedureState {
  INITIALIZING = 1;         // Procedure in construction, not yet added to the executor
  RUNNABLE = 2;             // Procedure added to the executor, and ready to be executed
  WAITING = 3;              // The procedure is waiting on children to be completed
  WAITING_TIMEOUT = 4;      // The procedure is waiting a timout or an external event
  ROLLEDBACK = 5;           // The procedure failed and was rolledback
  FINISHED = 6;             // The procedure completed successfully
}

/**
 * Procedure metadata, serialized by the ProcedureStore to be able to recover the old state.
 */
message Procedure {
  // internal "static" state
  required string className = 1;        // full classname to be able to instantiate the procedure
  optional uint64 parentId = 2;         // parent if not a root-procedure otherwise not set
  required uint64 procId = 3;
  required uint64 startTime = 4;
  optional string owner = 5;

  // internal "runtime" state
  required ProcedureState state = 6;
  repeated uint32 stackId = 7;          // stack indices in case the procedure was running
  required uint64 lastUpdate = 8;
  optional uint32 timeout = 9;

  // user state/results
  optional ProcedureExceptionMessage exception = 10;
  optional bytes result = 11;           // opaque (user) result structure
  optional bytes state_data = 12;       // opaque (user) procedure internal-state
}

/**
 * Procedure WAL header
 */
message ProcedureWALHeader {
  required uint32 version = 1;
  required uint32 type = 2;
  required uint64 logId = 3;
  required uint64 minProcId = 4;
}

/**
 * Procedure WAL trailer
 */
message ProcedureWALTrailer {
  required uint32 version = 1;
  required uint64 trackerPos = 2;
}
